<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git_revert</title>
    <url>/2022/04/02/Git-revert/</url>
    <content><![CDATA[<h3 id="Git-revert"><a href="#Git-revert" class="headerlink" title="Git revert"></a>Git revert</h3><ul>
<li>Rename<ul>
<li>파일의 이름을 바꿀때 사용</li>
<li>a.md를 b.md로 mv명령어로  이름을 바꾼다면 git에서는 a.md가 삭제되고 b.md를 untracked로 인식</li>
<li>git mv 명령어를 사용하면 git에서도 제대로 인식</li>
</ul>
</li>
<li>Undoing (commit 하지 않은 작업 취소)<ul>
<li>자주 사용하는 명령어로 변경사항을 취소하기 위한 명령</li>
<li>git restore name -&gt; name의 변경사항이 취소 (원상복구)</li>
<li>git restore . -&gt; 현재 디렉토리 아래의 모든 파일 복구</li>
</ul>
</li>
<li>Unstaging (add로 staging 한 작업 되돌림)<ul>
<li>명령에 reset이 들어가있어 팀 전체에 영향을 줄 수 있어 왠만하면 사용 자제</li>
<li>git reset HEAD name : add한 작업 취소</li>
</ul>
</li>
<li>Edit latest commit (commit massage 수정)<ul>
<li>git commit –amend (직전 commit 다시 열어서 수정)</li>
<li>rebase 명령으로 직전 말고도 commit 수정가능</li>
<li>commit을 대충 할수도 있기 때문에 사용을 자제</li>
</ul>
</li>
<li>Revert (commit을 되돌릴 때 사용)<ul>
<li>git revert –no-commit HEAD~n.. -&gt; n개의 commit을 되돌리고 되돌리는 commit massage 작성</li>
<li>–no-commit 안붙이면 n개 취소할 때 n개의 commit 작성해야됨</li>
</ul>
</li>
</ul>
<h3 id="Git-Team-practice"><a href="#Git-Team-practice" class="headerlink" title="Git Team practice"></a>Git Team practice</h3><ol>
<li>팀장이 repo 생성, git clone 후 git flow init</li>
<li>팀원이 팀장의 repo를 fork, fork한 URL로 git clone</li>
<li>팀원은 issue를 작성하고 git flow init 으로 develop으로 가면 팀장과 같은 상태가됨</li>
<li>git flow feature start name 으로 기능별로 작업하고 add, commit</li>
<li>git flow feature finish name 으로 feature 브렌치 작업 종료하고 git push -u origin develop</li>
<li>fork한 페이지로 가서 pull request</li>
<li>팀장이 작업 내용을 확인해보고 merge</li>
<li>git remote add upstream 팀장repo URL 으로 upstream 주소 추가</li>
<li>git pull upstream develop</li>
<li>어느정도 작업내용이 쌓이면 팀장이 git flow release로 테스트하고 정상적이라면 main으로 release</li>
</ol>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>TIL</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2022/04/01/Git/</url>
    <content><![CDATA[<h1 id="Git-버전관리시스템"><a href="#Git-버전관리시스템" class="headerlink" title="Git : 버전관리시스템"></a>Git : 버전관리시스템</h1><ul>
<li>특징<ul>
<li>직관적, 빠르고 단순</li>
<li>분산형 저장소 지원</li>
<li>비선형 개발 가능</li>
</ul>
</li>
<li>장점<ul>
<li>하나의 파일에 n개의 버전 가능</li>
<li>수정 내용은 commit단위로 관리, 배포 가능, 원하는 시점으로 checkout 가능</li>
<li>기능 추가는 branch로 개발하여 테스트 가능, 성공적으로 개발되면 merge해서 반영</li>
<li>인터넷 없이도 개발 가능</li>
</ul>
</li>
<li>구조<ul>
<li>Blob : 수정사항, 코드 내용</li>
<li>Tree : Blob이나 subtree의 메타데이터(디렉토리 위치, 속성, 이름 등)</li>
<li>Commit : 실제파일?</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>TIL</tag>
      </tags>
  </entry>
  <entry>
    <title>GitBlog</title>
    <url>/2022/04/01/GitBlog/</url>
    <content><![CDATA[<h3 id="Github-Blog"><a href="#Github-Blog" class="headerlink" title="Github Blog"></a>Github Blog</h3><p>repo : username.github.io 만들면 서버를 제공하는 페이지 제공<br>꾸미기 위해 Node.js &amp; npm hexo-cli -g 다운로드</p>
<h1 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h1><ol>
<li><p>Hexo blog</p>
<ol>
<li>hexo init folder name</li>
<li>vi config.yml : #Site 에서 title, subtitle, des, author 작성</li>
</ol>
</li>
<li><p>Hexo blog theme (next)</p>
<ol>
<li>git clone {URL} : 원하는 theme의 repo 찾아서 다운, themes 디렉토리에 다운됬는지 확인</li>
<li>config.yml에서 #Extensions에서 theme 에 다운된 theme이름 작성</li>
<li>themes&#x2F;theme-name 디렉토리에서 config.yml 들어가서 #Schemes에서 Muse 주석처리, Gemini 주석제거</li>
</ol>
</li>
<li><p>Hexo blog Deployment</p>
<ol>
<li>npm install hexo-deployer-git –save</li>
<li>config.yml 에서 #Deployment에서 수정 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type: git</span><br><span class="line">repo : git blog주소</span><br><span class="line">branch: main</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>Create Menu</p>
<ol>
<li>themes&#x2F;theme-name의 config.yml 파일에서 menu: 에서 tags와 categories의 주석처리 제거 (tags, categories 생성 예정)</li>
<li>hexo new post 를 이용하여 categories, tage 페이지를 각각 생성, 각 index.md에서 date 밑에 type: “페이지이름” comments: false 추가</li>
<li>post 작성시 상단 title, date 아래에 categories, tags 항목 작성하면 됨</li>
</ol>
</li>
<li><p>Add search function</p>
<ol>
<li>npm install hexo-generator-searchdb</li>
<li>config.yml 제일 아래쪽에 다음 코드 추가 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Local Search </span><br><span class="line"># search </span><br><span class="line">search:</span><br><span class="line">    path: search.xml</span><br><span class="line">    field: post</span><br><span class="line">    content: true</span><br><span class="line">    format: html</span><br></pre></td></tr></table></figure></li>
<li>theme-name의 config.yml에서 Local Search(약 740L) 에서 enable 값을 true, trigger 값을 manual로 수정</li>
</ol>
</li>
</ol>
<h3 id="New-post-amp-deploy"><a href="#New-post-amp-deploy" class="headerlink" title="New post &amp; deploy"></a>New post &amp; deploy</h3><ol>
<li>hexo new post name</li>
<li>hexo clean &amp;&amp; hexo generate</li>
<li>hexo server (localhost update)</li>
<li>hexo clean &amp;&amp; hexo deploy (github blog update)</li>
</ol>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>TIL</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitflow</title>
    <url>/2022/04/01/Gitflow/</url>
    <content><![CDATA[<h1 id="Day-3"><a href="#Day-3" class="headerlink" title="Day - 3"></a>Day - 3</h1><h3 id="README-md"><a href="#README-md" class="headerlink" title="README.md"></a>README.md</h3><ul>
<li>프로젝트와 Repository를 설명하는 책의 표지같은 문서</li>
<li>나와 동료, 이 Repo의 사용자를 위한 문서</li>
<li>Reference가 많기 때문에 참고하여 작성 (ex. Angular)</li>
</ul>
<h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><ul>
<li>github에 올릴 필요가 없는 파일을 git이 무시하기 위한 조치</li>
<li>.gitignore 파일을 만들고 vim을 이용하여 무시할 파일명 작성</li>
<li>gitignore.io 사이트에서 환경을 검색하여 자동작성 가능</li>
</ul>
<h3 id="LICENSE"><a href="#LICENSE" class="headerlink" title="LICENSE"></a>LICENSE</h3><ul>
<li>GNU는 단 1줄이라도 코드를 사용하면 사용한 프로젝트의 모든 코드를 공개하거나 비용을 지불해야 되기 때문에 저작권을 잘 찾아보고 사용</li>
<li>MIT는 모두 자유롭게 사용 가능</li>
<li>Apache는 특허 관련된 저작권이 많아서 잘못 사용하면 Apache 재단에서 프로젝트를 자신의 것이라 주장 가능</li>
</ul>
<h3 id="Branch"><a href="#Branch" class="headerlink" title="Branch"></a>Branch</h3><ul>
<li>Branch란 분기점을 생성해 독립적으로 코드를 변경할 수 있도록 도와주는 모델</li>
<li>분기점은 commit을 기준으로 생성</li>
<li>branch의 name은 항상 무엇을 할지 명시적으로 표현</li>
<li>main, hello 두개 branch가 있을때 hello 수정하고 commit 후 main에서 확인하면 수정되지 않음 -&gt; 독립적으로 적용되는 것을 알 수 있음</li>
<li>merge를 통해 작업을 합칠 수 있다. hello의 작업을 main에 적용하려면 main에서 hello의 코드를 가져오는 느낌으로 실행됨</li>
</ul>
<h1 id="Branching-models"><a href="#Branching-models" class="headerlink" title="Branching models"></a>Branching models</h1><ol>
<li>git flow : main, develop 두개를 중심으로 hotpix, release등을 서브로 작업하며 가장 많이 사용중<ul>
<li>git flow 확장도구를 다운로드 받고 사용가능</li>
<li>git flow init을 통해 develop 브렌치 생성</li>
<li>develop 브렌치에서 feature 브렌치 생성, 기능 개발, 기능별 commit</li>
<li>feature 브렌치 develop에 merge, release하여 잘 작동하는지 test.</li>
<li>release 종료 후 tag message 작성, develop과 main 각각 push, main에서는 tag를 추가적으로 push</li>
</ul>
</li>
<li>github flow: git flow 이외에 대부분 사용 (전체 git flow 90%, 얘가 나머지) CI에 의존하며 단순하기 때문에 빠르게 자주 업데이트 가능, 불완전 코드 노출될 약점 존재</li>
<li>gitlab flow: 강사님 피셜 쓰는거 못봄</li>
</ol>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>TIL</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitflow2</title>
    <url>/2022/04/01/Gitflow2/</url>
    <content><![CDATA[<h1 id="Using-git-flow-with-external-programs"><a href="#Using-git-flow-with-external-programs" class="headerlink" title="Using git flow with external programs"></a>Using git flow with external programs</h1><ol>
<li>git flow init</li>
<li>git flow feature start name</li>
<li>코딩 프로그램에서 코딩 및 컴파일, 저장 (local 저장소와 파일저장위치 동일하게)</li>
<li>add, commit(log 작성)</li>
<li>git flow feature finish</li>
</ol>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>TIL</tag>
      </tags>
  </entry>
  <entry>
    <title>Github</title>
    <url>/2022/04/01/Github/</url>
    <content><![CDATA[<h3 id="How-to-use-github"><a href="#How-to-use-github" class="headerlink" title="How to use github?"></a>How to use github?</h3><ol>
<li>원격저장소(github) 에서 repo 생성</li>
<li>repo의 URL을 복사하고 git bash로 돌아와 git clone URL 명령 입력</li>
</ol>
<h3 id="Process-of-saving-to-github"><a href="#Process-of-saving-to-github" class="headerlink" title="Process of saving to github"></a>Process of saving to github</h3><ol>
<li>git clone으로 연동된 디렉토리에서 작업</li>
<li>git add file name 으로 staging</li>
<li>git commit으로 commit message 작성</li>
<li>git push origin main</li>
</ol>
<h1 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h1><ul>
<li>commit은 동작 가능한 최소 기능단위로 자주 진행</li>
<li>모두가 이해 가능한 log 작성</li>
<li>제목은 축약, 내용은 문장형으로 작성</li>
<li>제목과 내용은 한줄 띄워 분리</li>
<li>prefix 반드시 사용<ul>
<li>feat : 기능 개발</li>
<li>fix : 오류 개선, 버그패치</li>
<li>docs : 문서화 작업</li>
<li>test : test관련</li>
<li>conf : 환경설정</li>
<li>build : 빌드관련</li>
<li>ci : Continuous Integration 관련</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>TIL</tag>
      </tags>
  </entry>
</search>
