<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git_revert</title>
    <url>/2022/04/02/Git-revert/</url>
    <content><![CDATA[<h3 id="Git-revert"><a href="#Git-revert" class="headerlink" title="Git revert"></a>Git revert</h3><ul>
<li>Rename<ul>
<li>파일의 이름을 바꿀때 사용</li>
<li>a.md를 b.md로 mv명령어로  이름을 바꾼다면 git에서는 a.md가 삭제되고 b.md를 untracked로 인식</li>
<li>git mv 명령어를 사용하면 git에서도 제대로 인식</li>
</ul>
</li>
<li>Undoing (commit 하지 않은 작업 취소)<ul>
<li>자주 사용하는 명령어로 변경사항을 취소하기 위한 명령</li>
<li>git restore name -&gt; name의 변경사항이 취소 (원상복구)</li>
<li>git restore . -&gt; 현재 디렉토리 아래의 모든 파일 복구</li>
</ul>
</li>
<li>Unstaging (add로 staging 한 작업 되돌림)<ul>
<li>명령에 reset이 들어가있어 팀 전체에 영향을 줄 수 있어 왠만하면 사용 자제</li>
<li>git reset HEAD name : add한 작업 취소</li>
</ul>
</li>
<li>Edit latest commit (commit massage 수정)<ul>
<li>git commit –amend (직전 commit 다시 열어서 수정)</li>
<li>rebase 명령으로 직전 말고도 commit 수정가능</li>
<li>commit을 대충 할수도 있기 때문에 사용을 자제</li>
</ul>
</li>
<li>Revert (commit을 되돌릴 때 사용)<ul>
<li>git revert –no-commit HEAD~n.. -&gt; n개의 commit을 되돌리고 되돌리는 commit massage 작성</li>
<li>–no-commit 안붙이면 n개 취소할 때 n개의 commit 작성해야됨</li>
</ul>
</li>
</ul>
<h3 id="Git-Team-practice"><a href="#Git-Team-practice" class="headerlink" title="Git Team practice"></a>Git Team practice</h3><ol>
<li>팀장이 repo 생성, git clone 후 git flow init</li>
<li>팀원이 팀장의 repo를 fork, fork한 URL로 git clone</li>
<li>팀원은 issue를 작성하고 git flow init 으로 develop으로 가면 팀장과 같은 상태가됨</li>
<li>git flow feature start name 으로 기능별로 작업하고 add, commit</li>
<li>git flow feature finish name 으로 feature 브렌치 작업 종료하고 git push -u origin develop</li>
<li>fork한 페이지로 가서 pull request</li>
<li>팀장이 작업 내용을 확인해보고 merge</li>
<li>git remote add upstream 팀장repo URL 으로 upstream 주소 추가</li>
<li>git pull upstream develop</li>
<li>어느정도 작업내용이 쌓이면 팀장이 git flow release로 테스트하고 정상적이라면 main으로 release</li>
</ol>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>TIL</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2022/04/01/Git/</url>
    <content><![CDATA[<h1 id="Git-버전관리시스템"><a href="#Git-버전관리시스템" class="headerlink" title="Git : 버전관리시스템"></a>Git : 버전관리시스템</h1><ul>
<li>특징<ul>
<li>직관적, 빠르고 단순</li>
<li>분산형 저장소 지원</li>
<li>비선형 개발 가능</li>
</ul>
</li>
<li>장점<ul>
<li>하나의 파일에 n개의 버전 가능</li>
<li>수정 내용은 commit단위로 관리, 배포 가능, 원하는 시점으로 checkout 가능</li>
<li>기능 추가는 branch로 개발하여 테스트 가능, 성공적으로 개발되면 merge해서 반영</li>
<li>인터넷 없이도 개발 가능</li>
</ul>
</li>
<li>구조<ul>
<li>Blob : 수정사항, 코드 내용</li>
<li>Tree : Blob이나 subtree의 메타데이터(디렉토리 위치, 속성, 이름 등)</li>
<li>Commit : 실제파일?</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>TIL</tag>
      </tags>
  </entry>
  <entry>
    <title>GitBlog</title>
    <url>/2022/04/01/GitBlog/</url>
    <content><![CDATA[<h3 id="Github-Blog"><a href="#Github-Blog" class="headerlink" title="Github Blog"></a>Github Blog</h3><p>repo : username.github.io 만들면 서버를 제공하는 페이지 제공<br>꾸미기 위해 Node.js &amp; npm hexo-cli -g 다운로드</p>
<h1 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h1><ol>
<li><p>Hexo blog</p>
<ol>
<li>hexo init folder name</li>
<li>vi config.yml : #Site 에서 title, subtitle, des, author 작성</li>
</ol>
</li>
<li><p>Hexo blog theme (next)</p>
<ol>
<li>git clone {URL} : 원하는 theme의 repo 찾아서 다운, themes 디렉토리에 다운됬는지 확인</li>
<li>config.yml에서 #Extensions에서 theme 에 다운된 theme이름 작성</li>
<li>themes&#x2F;theme-name 디렉토리에서 config.yml 들어가서 #Schemes에서 Muse 주석처리, Gemini 주석제거</li>
</ol>
</li>
<li><p>Hexo blog Deployment</p>
<ol>
<li>npm install hexo-deployer-git –save</li>
<li>config.yml 에서 #Deployment에서 수정 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type: git</span><br><span class="line">repo : git blog주소</span><br><span class="line">branch: main</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>Create Menu</p>
<ol>
<li>themes&#x2F;theme-name의 config.yml 파일에서 menu: 에서 tags와 categories의 주석처리 제거 (tags, categories 생성 예정)</li>
<li>hexo new post 를 이용하여 categories, tage 페이지를 각각 생성, 각 index.md에서 date 밑에 type: “페이지이름” comments: false 추가</li>
<li>post 작성시 상단 title, date 아래에 categories, tags 항목 작성하면 됨</li>
</ol>
</li>
<li><p>Add search function</p>
<ol>
<li>npm install hexo-generator-searchdb</li>
<li>config.yml 제일 아래쪽에 다음 코드 추가 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Local Search </span><br><span class="line"># search </span><br><span class="line">search:</span><br><span class="line">    path: search.xml</span><br><span class="line">    field: post</span><br><span class="line">    content: true</span><br><span class="line">    format: html</span><br></pre></td></tr></table></figure></li>
<li>theme-name의 config.yml에서 Local Search(약 740L) 에서 enable 값을 true, trigger 값을 manual로 수정</li>
</ol>
</li>
</ol>
<h3 id="New-post-amp-deploy"><a href="#New-post-amp-deploy" class="headerlink" title="New post &amp; deploy"></a>New post &amp; deploy</h3><ol>
<li>hexo new post name</li>
<li>hexo clean &amp;&amp; hexo generate</li>
<li>hexo server (localhost update)</li>
<li>hexo clean &amp;&amp; hexo deploy (github blog update)</li>
</ol>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>TIL</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitflow</title>
    <url>/2022/04/01/Gitflow/</url>
    <content><![CDATA[<h1 id="Day-3"><a href="#Day-3" class="headerlink" title="Day - 3"></a>Day - 3</h1><h3 id="README-md"><a href="#README-md" class="headerlink" title="README.md"></a>README.md</h3><ul>
<li>프로젝트와 Repository를 설명하는 책의 표지같은 문서</li>
<li>나와 동료, 이 Repo의 사용자를 위한 문서</li>
<li>Reference가 많기 때문에 참고하여 작성 (ex. Angular)</li>
</ul>
<h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><ul>
<li>github에 올릴 필요가 없는 파일을 git이 무시하기 위한 조치</li>
<li>.gitignore 파일을 만들고 vim을 이용하여 무시할 파일명 작성</li>
<li>gitignore.io 사이트에서 환경을 검색하여 자동작성 가능</li>
</ul>
<h3 id="LICENSE"><a href="#LICENSE" class="headerlink" title="LICENSE"></a>LICENSE</h3><ul>
<li>GNU는 단 1줄이라도 코드를 사용하면 사용한 프로젝트의 모든 코드를 공개하거나 비용을 지불해야 되기 때문에 저작권을 잘 찾아보고 사용</li>
<li>MIT는 모두 자유롭게 사용 가능</li>
<li>Apache는 특허 관련된 저작권이 많아서 잘못 사용하면 Apache 재단에서 프로젝트를 자신의 것이라 주장 가능</li>
</ul>
<h3 id="Branch"><a href="#Branch" class="headerlink" title="Branch"></a>Branch</h3><ul>
<li>Branch란 분기점을 생성해 독립적으로 코드를 변경할 수 있도록 도와주는 모델</li>
<li>분기점은 commit을 기준으로 생성</li>
<li>branch의 name은 항상 무엇을 할지 명시적으로 표현</li>
<li>main, hello 두개 branch가 있을때 hello 수정하고 commit 후 main에서 확인하면 수정되지 않음 -&gt; 독립적으로 적용되는 것을 알 수 있음</li>
<li>merge를 통해 작업을 합칠 수 있다. hello의 작업을 main에 적용하려면 main에서 hello의 코드를 가져오는 느낌으로 실행됨</li>
</ul>
<h1 id="Branching-models"><a href="#Branching-models" class="headerlink" title="Branching models"></a>Branching models</h1><ol>
<li>git flow : main, develop 두개를 중심으로 hotpix, release등을 서브로 작업하며 가장 많이 사용중<ul>
<li>git flow 확장도구를 다운로드 받고 사용가능</li>
<li>git flow init을 통해 develop 브렌치 생성</li>
<li>develop 브렌치에서 feature 브렌치 생성, 기능 개발, 기능별 commit</li>
<li>feature 브렌치 develop에 merge, release하여 잘 작동하는지 test.</li>
<li>release 종료 후 tag message 작성, develop과 main 각각 push, main에서는 tag를 추가적으로 push</li>
</ul>
</li>
<li>github flow: git flow 이외에 대부분 사용 (전체 git flow 90%, 얘가 나머지) CI에 의존하며 단순하기 때문에 빠르게 자주 업데이트 가능, 불완전 코드 노출될 약점 존재</li>
<li>gitlab flow: 강사님 피셜 쓰는거 못봄</li>
</ol>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>TIL</tag>
      </tags>
  </entry>
  <entry>
    <title>Github</title>
    <url>/2022/04/01/Github/</url>
    <content><![CDATA[<h3 id="How-to-use-github"><a href="#How-to-use-github" class="headerlink" title="How to use github?"></a>How to use github?</h3><ol>
<li>원격저장소(github) 에서 repo 생성</li>
<li>repo의 URL을 복사하고 git bash로 돌아와 git clone URL 명령 입력</li>
</ol>
<h3 id="Process-of-saving-to-github"><a href="#Process-of-saving-to-github" class="headerlink" title="Process of saving to github"></a>Process of saving to github</h3><ol>
<li>git clone으로 연동된 디렉토리에서 작업</li>
<li>git add file name 으로 staging</li>
<li>git commit으로 commit message 작성</li>
<li>git push origin main</li>
</ol>
<h1 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h1><ul>
<li>commit은 동작 가능한 최소 기능단위로 자주 진행</li>
<li>모두가 이해 가능한 log 작성</li>
<li>제목은 축약, 내용은 문장형으로 작성</li>
<li>제목과 내용은 한줄 띄워 분리</li>
<li>prefix 반드시 사용<ul>
<li>feat : 기능 개발</li>
<li>fix : 오류 개선, 버그패치</li>
<li>docs : 문서화 작업</li>
<li>test : test관련</li>
<li>conf : 환경설정</li>
<li>build : 빌드관련</li>
<li>ci : Continuous Integration 관련</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>TIL</tag>
      </tags>
  </entry>
  <entry>
    <title>Java_day1</title>
    <url>/2022/04/05/Java-day1/</url>
    <content><![CDATA[<h3 id="JAVA-특징"><a href="#JAVA-특징" class="headerlink" title="JAVA 특징"></a>JAVA 특징</h3><ul>
<li>C, C++과 달리 pointer를 사용하지 않기 때문에 메모리를 직접 지정하지 않아서 프로그램이 더 안정적</li>
<li>개발에 필요한 JDK가 있고, 실행을 하기 위한 JRE가 있다.</li>
<li>JAVA는 다형성 &#x3D; 상속 + 메소드 오버라이딩 + 형변환 이라는 프로그래밍 언어 고유의 특징이 있다.</li>
<li>컴파일러가 하나가 아닌 두개(1, 2가 컴파일러) <ul>
<li>JAVA -&gt; (소스코드.java) -&gt; 컴파일러(1) -&gt; (바이트 코드.class) 여기까지 플랫폼(OS) 영향이 없다.</li>
<li>JVM (2) 에서 각 플랫폼 (OS) 별로 똑같이 실행 가능</li>
</ul>
</li>
</ul>
<h3 id="JAVA-자료형"><a href="#JAVA-자료형" class="headerlink" title="JAVA 자료형"></a>JAVA 자료형</h3><ul>
<li>메모리 크기가 정해진 기본 자료형 (int, char, double, boolean etc.)</li>
<li>클래스에 따라 사용 크기가 달라지며 JDK에서 제공되는 클래스와 프로그래머가 정의하는 참조형 자료형이 있다.</li>
</ul>
<h3 id="형-변환"><a href="#형-변환" class="headerlink" title="형 변환"></a>형 변환</h3><ul>
<li>서로 다른 자료형 값이 대입될 때 형 변환이 일어난다.</li>
<li>묵시적 형 변환 : 큰 수나 더 정밀한 수로 대입될때</li>
<li>명시적 형 변환 : 변환될 자료 형을 명시하는 것으로 자료 손실이 발생할 수도 있다.</li>
</ul>
<h3 id="단란-회로-평가"><a href="#단란-회로-평가" class="headerlink" title="단란 회로 평가"></a>단란 회로 평가</h3><ul>
<li>논리곱 (&amp;&amp;) 은 두 항이 모두 true 일때 결과가 true. 앞의 항이 false면 뒤 항 결과 평가X false (&amp; 하나만 사용하면 앞, 뒤항 모두 평가)</li>
<li>논리합 (||) 은 두 항 모두 false 일때 결과가 false, 앞 항이 true면 뒤 항 결과 X true (| 하나만 사용하면 앞, 뒤항 모두 평가)</li>
</ul>
<h3 id="비트-연산자"><a href="#비트-연산자" class="headerlink" title="비트 연산자"></a>비트 연산자</h3><ul>
<li>마스크 : 특정 비트를 제외하고 몇 개의 비트 값만 사용할 때 사용</li>
<li>특정 비트를 1로 설정하여 사용 가능 ( &amp; 00001111 하면 하위 4비트만 사용 가능 )</li>
<li>| 11110000 으로 원하는 비트 원하는 자리의 비트만 사용가능</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>TIL</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitflow2</title>
    <url>/2022/04/01/Gitflow2/</url>
    <content><![CDATA[<h1 id="Using-git-flow-with-external-programs"><a href="#Using-git-flow-with-external-programs" class="headerlink" title="Using git flow with external programs"></a>Using git flow with external programs</h1><ol>
<li>git flow init</li>
<li>git flow feature start name</li>
<li>코딩 프로그램에서 코딩 및 컴파일, 저장 (local 저장소와 파일저장위치 동일하게)</li>
<li>add, commit(log 작성)</li>
<li>git flow feature finish</li>
</ol>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>TIL</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-day2</title>
    <url>/2022/04/05/Java-day2/</url>
    <content><![CDATA[<h2 id="객체-지향-프로그래밍"><a href="#객체-지향-프로그래밍" class="headerlink" title="객체 지향 프로그래밍"></a>객체 지향 프로그래밍</h2><h3 id="객체"><a href="#객체" class="headerlink" title="객체"></a>객체</h3><ul>
<li>의사나 행위가 미치는 대상</li>
<li>구체적, 추상적 데이터 단위</li>
</ul>
<h3 id="객체-지향-프로그램과-절차-지향-프로그래밍"><a href="#객체-지향-프로그램과-절차-지향-프로그래밍" class="headerlink" title="객체 지향 프로그램과 절차 지향 프로그래밍"></a>객체 지향 프로그램과 절차 지향 프로그래밍</h3><p>아침에 일어나 학교를 가는 과정이 있을 때</p>
<ol>
<li>절차 지향 프로그래밍 : 시간이나 사건의 흐름에 따른 프로그래밍 (C가 대표적)</li>
<li>객체 지향 프로그래밍 : (C++, C#, Python, Js ETC.)<br><a href="https://www.notion.so/Day-7-a645cf70f91644fe868a7f77a3bd7235#e6390f83672a4766b236c4f1072c292c">Look at this</a></li>
</ol>
<h3 id="객체-지향-프로그램-구현"><a href="#객체-지향-프로그램-구현" class="headerlink" title="객체 지향 프로그램 구현"></a>객체 지향 프로그램 구현</h3><ul>
<li>객체 정의</li>
<li>각 객체의 속성은 멤버 변수로, 기능은 메소드로 구현</li>
<li>각 개체 기능간 소통(message)을 통해 객체간 상호작용</li>
</ul>
<hr>
<h2 id="함수와-메소드"><a href="#함수와-메소드" class="headerlink" title="함수와 메소드"></a>함수와 메소드</h2><h3 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h3><ul>
<li>하나의 기능을 수행하는 일련의 코드</li>
<li>구현(정의)된 함수는 호출하여 사용, 호출 함수는 메모리와 제어를 할당받고  기능이 끝나면 제어와 메모리 반환</li>
<li>flow : main이 작동할때 스택에 main의 메모리 할당, 메소드 호출시 스택에서 main의 위에 메소드를 위한 메모리 할당, 메소드 종료 시 스택에서 메소드의 메모리 삭제</li>
</ul>
<h3 id="메소드"><a href="#메소드" class="headerlink" title="메소드"></a>메소드</h3><ul>
<li>객체의 기능 구현을 위한 클래스 내부에 구현되는 함수</li>
<li>메소드를 구현함으로 객체의 기능 구현</li>
<li>메소드의 이름은 그 객체를 사용하는 client에 맞게 작성</li>
</ul>
<h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><ul>
<li>student class (객체의 틀)를 생성하고 studentTest class에서 사용하려면 Student name &#x3D; new Student(); 같이 인스턴스를 생성해야됨</li>
<li>name.methodName(); 같은 방법으로 student class의 메소드도 사용 가능</li>
<li>클래스 하나를 기반으로 여러 인스턴스 생성 가능 (바로 위를 예시로 들면 학생은 한명이 아니라 여러명이기 때문에)</li>
<li>student class는 객체의 틀만 제공했기 때문에 인스턴스 생성 후 멤버 변수는 따로 입력</li>
</ul>
<hr>
<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="Array-1"><a href="#Array-1" class="headerlink" title="Array"></a>Array</h3><ul>
<li>dataType[] arrayName &#x3D; new dataType[n]; n크기의 배열 생성 ([] 하나 더 붙이면 2차원 배열)</li>
<li>dataType[] arrayName &#x3D; {a, b, c, d, e}; 배열 생성과 동시에 초기화 가능</li>
<li>이 때 arrayName에는 배열의 첫번째 메모리 주소값을 저장 (&#x3D; 참조변수)</li>
<li>enhanced for 사용 가능 for (dataType var : arrayName) </li>
<li>arrayName.length는 배열의 크기 나타냄</li>
</ul>
<h3 id="명령-행-매개변수"><a href="#명령-행-매개변수" class="headerlink" title="명령 행 매개변수"></a>명령 행 매개변수</h3><ul>
<li>프로그램 실행할 때 외부로부터 전달받는 데이터</li>
<li>main(String[] args) -&gt; Eclipse 에서 실행할 때 따로 값을 줄 수 있음</li>
<li>형변환을 통해 다양하게 사용 가능</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>TIL</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-day3</title>
    <url>/2022/04/06/Java-day3/</url>
    <content><![CDATA[<h3 id="인스턴스-생성과-힙-메모리"><a href="#인스턴스-생성과-힙-메모리" class="headerlink" title="인스턴스 생성과 힙 메모리"></a>인스턴스 생성과 힙 메모리</h3><h6 id="인스턴스-instance"><a href="#인스턴스-instance" class="headerlink" title="인스턴스 (instance)"></a>인스턴스 (instance)</h6><ul>
<li>클래스는 객체의 속성을 정의, 기능을 구현하여 만들어 놓은 코드 상태</li>
<li>실제 클래스 기반으로 생성된 객체(인스턴스)는 각각 다른 멤버 변수 값 가짐</li>
<li>new 키워드를 사용하여 인스턴스 생성</li>
</ul>
<h6 id="힙-메모리-heap-memory"><a href="#힙-메모리-heap-memory" class="headerlink" title="힙 메모리 (heap memory)"></a>힙 메모리 (heap memory)</h6><ul>
<li>생성된 인스턴스는 동적 메모리 (heap memory) 에 할당됨</li>
<li>C나 C++ 언어에서는 사용한 동적 메모리를 프로그래머가 해제 시켜야 하지만 자바에서는 Gabage Collector가 주기적으로 사용하지 않는 메모리 해제</li>
<li>하나의 클래스로 부터 여러개의 인스턴스가 생성되고 각각 다른 메모리 주소를 가지게 됨</li>
</ul>
<hr>
<h3 id="생성자-constructor"><a href="#생성자-constructor" class="headerlink" title="생성자 (constructor)"></a>생성자 (constructor)</h3><h6 id="생성자"><a href="#생성자" class="headerlink" title="생성자"></a>생성자</h6><ul>
<li>오직 객체를 생성하기 위해 new와 함께 호출 className instanceName &#x3D; new className(); 에서 className()이 생성자</li>
<li>객체가 생성될 때 변수나 상수를 초기화 하거나 다른 초기화 기능을 수행하는 메소드 호출</li>
<li>반환값이 없고 클래스 이름과 동일</li>
<li>대부분 생성자는 외부 접근이 가능하지만 필요하다면 private으로 선언할수도 있다.</li>
<li>this 는 변수나 메소드 앞에 사용되며 this 사용시 매개변수가 아닌 멤버 변수를 의미</li>
<li>맴버변수들의 값을 모두 default로 초기화</li>
</ul>
<h6 id="기본-생성자-default-constructor"><a href="#기본-생성자-default-constructor" class="headerlink" title="기본 생성자 (default constructor)"></a>기본 생성자 (default constructor)</h6><ul>
<li>클래스에 반드시 하나이상 존재</li>
<li>생성자를 구현하지 않아도 new 키워드와 함께 생성자를 호출 가능</li>
<li>클래스 생성자 하나도 없는 경우 컴파일러가 생성자 코드 넣어준다 (public className(){})</li>
<li>매개변수, 구현부가 없다</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line"></span><br><span class="line">	public int studentNumber;</span><br><span class="line">	public String studentName;</span><br><span class="line">	public int grade;</span><br><span class="line">	</span><br><span class="line">	//default 생성자</span><br><span class="line">	public Student() &#123;&#125;</span><br><span class="line"></span><br><span class="line">	//이 아래의 Student는 모두 오버라이</span><br><span class="line">	//생성자를 만들면서 매개변수의 값을 같이 받겠다</span><br><span class="line">	//Alt + Shift + s 에서 Generate constructor using field 하면 자동생성</span><br><span class="line">	public Student(int studentNumber, String studentName, int grade) &#123;</span><br><span class="line">		this.studentNumber = studentNumber;</span><br><span class="line">		this.studentName = studentName;</span><br><span class="line">		this.grade = grade;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public Student(int studentNumber, String studentName) &#123;</span><br><span class="line">		this.studentNumber = studentNumber;</span><br><span class="line">		this.studentName = studentName;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public Student(int studentNumber, String studentName, int grade) &#123;</span><br><span class="line">		//this() -&gt; 클래스 내부의 다른 생성자를 다시 호출</span><br><span class="line">		this(studentNumber, studentName);</span><br><span class="line">		this.grade = grade;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public String showStudentInfo() &#123;</span><br><span class="line">		return studentName + &quot;학생의 학번은 &quot; + studentNumber + &quot;이고, &quot; + grade + &quot;학년 입니다.&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class StudentTest &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">		//Student studentLee = new Student();</span><br><span class="line">		// 인스턴스를 만들면서 생성자에 맴버변수 값을 받아서 저장</span><br><span class="line">		Student studentLee = new Student(12345, &quot;Lee&quot;, 3);</span><br><span class="line"></span><br><span class="line">		// 생성자 오버로딩으로 이렇게도 인스턴스를 생성하고 멤버변수 값을 받을 수 있다.</span><br><span class="line">		Student studentChoi = new Student();</span><br><span class="line">		studentChoi.studentNumber = 12345678;</span><br><span class="line">		studentChoi.studentName = &quot;Choi&quot;;</span><br><span class="line">		studentChoi.grade = 3;</span><br><span class="line"></span><br><span class="line">		String data = studentLee.showStudentInfo();</span><br><span class="line">		System.out.println(data);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="접근-제어자"><a href="#접근-제어자" class="headerlink" title="접근 제어자"></a>접근 제어자</h6><ul>
<li>Public<ul>
<li>다른 패키지에서 사용  가능</li>
<li>다른 어떤 클래스에서도 public class는 사용 가능</li>
</ul>
</li>
<li>Private<ul>
<li>private이 붙은 변수나 메소드는 해당 클래스에서만 접근이 가능</li>
<li>다른 클래스에서 접근이 불가능</li>
</ul>
</li>
<li>Default<ul>
<li>접근 제어자를 별도로 설정하지 않는다면 해당 패키지 내에서만 접근이 가능</li>
<li>**동일 패키지**, 다른 클래스에서 접근 가능</li>
</ul>
</li>
<li>Protected<ul>
<li>이 제어자가 붙은 변수, 메소드는 동일 패키지의 클래스 또는 해당 클래스를 상속받은 다른 패키지의 클래스에서만 접근이 가능 (상속 → import packageName.ClassName;)</li>
</ul>
</li>
</ul>
<h6 id="패키지-package"><a href="#패키지-package" class="headerlink" title="패키지 (package)"></a>패키지 (package)</h6><ul>
<li>소문자로만 구성</li>
<li>여러 디렉토리로 구성되면 . 을 이용해 구분 (package school. high)</li>
<li>주석을 제외하고 클래스 파일의 가장 첫 줄에 위치</li>
<li>import packageName.ClassName; 다른 패키지의 클래스 사용하려면 있어야됨</li>
</ul>
]]></content>
      <tags>
        <tag>TIL</tag>
      </tags>
  </entry>
</search>
